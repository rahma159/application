#include "invoicemanagementwidget.h"
#include "ui_invoicemanagementwidget.h" // Generated by uic
#include "createeditinvoicedialog.h" // To open the editor

#include <QStandardItemModel> // Or your custom model header
#include <QMessageBox>
#include <QItemSelectionModel>
#include <QDebug>

InvoiceManagementWidget::InvoiceManagementWidget(QWidget *parent) :
    QDialog(parent), // Or QWidget(parent)
    ui(new Ui::InvoiceManagementWidget),
    invoiceModel(new QStandardItemModel(this)) // Example instantiation
{
    ui->setupUi(this);

    // Setup the table view model
    ui->invoiceTableView->setModel(invoiceModel);
    // TODO: Set model headers (invoiceModel->setHorizontalHeaderLabels(...))
    // TODO: Configure table view appearance (resize columns, selection mode etc.)
    // ui->invoiceTableView->setSelectionBehavior(QAbstractItemView::SelectRows);
    // ui->invoiceTableView->setSelectionMode(QAbstractItemView::SingleSelection);
    // ui->invoiceTableView->horizontalHeader()->setStretchLastSection(true);


    setupConnections();
    populateInvoiceTable(); // Initial data load
    updateButtonStates(); // Initial button state
}

InvoiceManagementWidget::~InvoiceManagementWidget()
{
    delete ui;
    // Note: invoiceModel is deleted automatically due to parent 'this'
}

void InvoiceManagementWidget::setupConnections()
{
    // Connect selection changes to update button states
    connect(ui->invoiceTableView->selectionModel(), &QItemSelectionModel::selectionChanged,
            this, &InvoiceManagementWidget::updateButtonStates);

    // You might connect filter widgets' signals (e.g., textChanged, currentIndexChanged)
    // to a slot that enables the Apply button, or directly to applyFilters if you want live filtering.
}

void InvoiceManagementWidget::populateInvoiceTable()
{
    qDebug() << "Populating invoice table...";
    invoiceModel->clear(); // Clear existing data

    // TODO: Set model header labels here if not done in constructor
    // QStringList headers = {"Invoice #", "Client", "Issue Date", "Due Date", "Amount", "Status"};
    // invoiceModel->setHorizontalHeaderLabels(headers);

    // TODO: Fetch invoice data (from database, file, etc.)
    // TODO: Loop through fetched data and add rows to invoiceModel
    // Example row:
    // QList<QStandardItem *> rowItems;
    // rowItems << new QStandardItem("INV-001") << new QStandardItem("Client A") << ... ;
    // invoiceModel->appendRow(rowItems);

    // After populating:
    updateSummaryLabels();
    ui->invoiceTableView->resizeColumnsToContents(); // Adjust columns
}

void InvoiceManagementWidget::updateSummaryLabels()
{
    qDebug() << "Updating summary labels...";
    // TODO: Calculate totals (Total Invoices, Due, Overdue, Avg Payment Time) from the model or data source
    int totalCount = invoiceModel->rowCount();
    double totalDue = 0.0;
    // ... calculations ...

    ui->totalInvoicesValueLabel->setText(QString::number(totalCount));
    ui->totalDueValueLabel->setText(QString("â‚¬%1").arg(totalDue, 0, 'f', 2)); // Format as needed
    // ... set other labels ...
}

void InvoiceManagementWidget::updateButtonStates()
{
    bool hasSelection = ui->invoiceTableView->selectionModel()->hasSelection();
    // TODO: Add more conditions based on invoice status if needed
    ui->editInvoiceButton->setEnabled(hasSelection);
    ui->deleteInvoiceButton->setEnabled(hasSelection);
    ui->markAsPaidButton->setEnabled(hasSelection);
    ui->sendInvoiceButton->setEnabled(hasSelection);
    ui->exportPdfButton->setEnabled(hasSelection);
}

void InvoiceManagementWidget::applyFilters()
{
    qDebug() << "Applying filters...";
    // TODO: Get filter values from ui elements (searchLineEdit, statusFilterComboBox, etc.)
    // TODO: Re-query data source with filters OR filter the existing model (less efficient for large data)
    // TODO: Call populateInvoiceTable() or a similar function to refresh the view with filtered data.
    populateInvoiceTable(); // Simplest approach: reload all data matching filters
}

// --- SLOTS ---

void InvoiceManagementWidget::on_createInvoiceButton_clicked()
{
    qDebug() << "Create Invoice button clicked";
    CreateEditInvoiceDialog editor(this); // Create editor instance
    // Pass -1 or an invalid ID to indicate creation mode
    // editor.loadInvoice(-1); // Example method to set mode
    if (editor.exec() == QDialog::Accepted) {
        qDebug() << "Invoice created/saved";
        populateInvoiceTable(); // Refresh list after creation
    }
}

void InvoiceManagementWidget::on_editInvoiceButton_clicked()
{
    qDebug() << "Edit Invoice button clicked";
    QModelIndexList selection = ui->invoiceTableView->selectionModel()->selectedRows();
    if (selection.isEmpty()) {
        QMessageBox::warning(this, "Selection Error", "Please select an invoice to edit.");
        return;
    }
    QModelIndex index = selection.first(); // Assuming single selection
    // TODO: Get the unique ID of the selected invoice from the model
    // int invoiceId = invoiceModel->item(index.row(), ID_COLUMN_INDEX)->data(Qt::UserRole).toInt(); // Example
    int invoiceId = 1; // Placeholder

    CreateEditInvoiceDialog editor(this);
    // TODO: Load the specific invoice data into the editor
    // editor.loadInvoice(invoiceId); // Example method
    if (editor.exec() == QDialog::Accepted) {
        qDebug() << "Invoice edited/saved";
        populateInvoiceTable(); // Refresh list after edit
    }
}

void InvoiceManagementWidget::on_deleteInvoiceButton_clicked()
{
    qDebug() << "Delete Invoice button clicked";
    QModelIndexList selection = ui->invoiceTableView->selectionModel()->selectedRows();
    if (selection.isEmpty()) {
        QMessageBox::warning(this, "Selection Error", "Please select an invoice to delete.");
        return;
    }
    // TODO: Get the ID of the selected invoice(s)

    if (QMessageBox::question(this, "Confirm Delete", "Are you sure you want to delete the selected invoice(s)?",
                              QMessageBox::Yes | QMessageBox::No) == QMessageBox::Yes)
    {
        qDebug() << "Deletion confirmed";
        // TODO: Implement invoice deletion logic (database, etc.)
        bool success = true; // Placeholder
        if(success) {
            populateInvoiceTable(); // Refresh list
        } else {
            QMessageBox::critical(this, "Error", "Failed to delete the invoice.");
        }
    }
}

void InvoiceManagementWidget::on_markAsPaidButton_clicked()
{
    qDebug() << "Mark As Paid button clicked";
    // TODO: Get selected invoice ID
    // TODO: Implement logic to mark invoice as paid (update status in DB)
    // TODO: Potentially record payment date
    populateInvoiceTable(); // Refresh to show status change
}

void InvoiceManagementWidget::on_sendInvoiceButton_clicked()
{
    qDebug() << "Send Invoice button clicked";
    // TODO: Get selected invoice ID
    // TODO: Implement logic to email/send the invoice (generate PDF, get client email, send)
    QMessageBox::information(this, "Send Invoice", "Invoice sending logic not yet implemented.");
}

void InvoiceManagementWidget::on_exportPdfButton_clicked()
{
    qDebug() << "Export PDF button clicked";
    // TODO: Get selected invoice ID
    // TODO: Implement PDF generation logic
    // TODO: Show QFileDialog to choose save location
    QMessageBox::information(this, "Export PDF", "PDF export logic not yet implemented.");
}

void InvoiceManagementWidget::on_exportFecButton_clicked()
{
    qDebug() << "Export FEC button clicked";
    // TODO: Implement FEC file generation logic (requires specific format based on regulations)
    // TODO: Show QFileDialog to choose save location
    QMessageBox::information(this, "Export FEC", "FEC export logic not yet implemented.");
}

void InvoiceManagementWidget::on_applyFiltersButton_clicked()
{
    applyFilters();
}

void InvoiceManagementWidget::on_clearFiltersButton_clicked()
{
    qDebug() << "Clear Filters button clicked";
    // Reset filter UI elements to default
    ui->searchLineEdit->clear();
    ui->statusFilterComboBox->setCurrentIndex(0); // Assuming 'All' is index 0
    ui->clientFilterComboBox->setCurrentIndex(0); // Assuming 'All' or default
    // ui->startDateEdit->setDate(DEFAULT_START_DATE); // Reset dates if needed
    // ui->endDateEdit->setDate(DEFAULT_END_DATE);

    // Reload all data (or remove filters from current view if applicable)
    populateInvoiceTable();
}

void InvoiceManagementWidget::on_invoiceTableView_selectionChanged()
{
    // This slot is connected manually in setupConnections
    updateButtonStates();
}
